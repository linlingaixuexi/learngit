class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        visited = set()
        queue = collections.deque()
        
        if grid[0][0] == 0:
            queue.append((1, (0, 0)))
            visited.add((0, 0))
            
        while queue:
            steps, (r,c) = queue.popleft()
            if (r, c) == (m-1, n-1):
                    return steps
            for x, y in [(r+1,c),(r-1,c),(r,c+1),(r,c-1),(r+1,c+1),(r-1,c-1),(r+1,c-1),(r-1,c+1)]:
                if 0<=x<m and 0<=y<n and grid[x][y] == 0 and (x, y) not in visited:
                    queue.append((steps+1, (x, y)))
                    visited.add((x, y))
                    
        return -1
                
                    
